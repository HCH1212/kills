// Code generated by Kitex v0.9.1. DO NOT EDIT.

package userhoster

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	userhoster "rpc-server/rpc/kitex_gen/userhoster"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Register": kitex.NewMethodInfo(
		registerHandler,
		newUserhosterRegisterArgs,
		newUserhosterRegisterResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Login": kitex.NewMethodInfo(
		loginHandler,
		newUserhosterLoginArgs,
		newUserhosterLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SetToken": kitex.NewMethodInfo(
		setTokenHandler,
		newUserhosterSetTokenArgs,
		newUserhosterSetTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	userhosterServiceInfo                = NewServiceInfo()
	userhosterServiceInfoForClient       = NewServiceInfoForClient()
	userhosterServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userhosterServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userhosterServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userhosterServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "userhoster"
	handlerType := (*userhoster.Userhoster)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "userhoster",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userhoster.UserhosterRegisterArgs)

	err := handler.(userhoster.Userhoster).Register(ctx, realArg.U, realArg.H)
	if err != nil {
		return err
	}

	return nil
}
func newUserhosterRegisterArgs() interface{} {
	return userhoster.NewUserhosterRegisterArgs()
}

func newUserhosterRegisterResult() interface{} {
	return userhoster.NewUserhosterRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userhoster.UserhosterLoginArgs)

	err := handler.(userhoster.Userhoster).Login(ctx, realArg.U, realArg.H)
	if err != nil {
		return err
	}

	return nil
}
func newUserhosterLoginArgs() interface{} {
	return userhoster.NewUserhosterLoginArgs()
}

func newUserhosterLoginResult() interface{} {
	return userhoster.NewUserhosterLoginResult()
}

func setTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userhoster.UserhosterSetTokenArgs)
	realResult := result.(*userhoster.UserhosterSetTokenResult)
	success, err := handler.(userhoster.Userhoster).SetToken(ctx, realArg.U, realArg.H)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newUserhosterSetTokenArgs() interface{} {
	return userhoster.NewUserhosterSetTokenArgs()
}

func newUserhosterSetTokenResult() interface{} {
	return userhoster.NewUserhosterSetTokenResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, u *userhoster.User, h *userhoster.Hoster) (err error) {
	var _args userhoster.UserhosterRegisterArgs
	_args.U = u
	_args.H = h
	var _result userhoster.UserhosterRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) Login(ctx context.Context, u *userhoster.User, h *userhoster.Hoster) (err error) {
	var _args userhoster.UserhosterLoginArgs
	_args.U = u
	_args.H = h
	var _result userhoster.UserhosterLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) SetToken(ctx context.Context, u *userhoster.User, h *userhoster.Hoster) (r string, err error) {
	var _args userhoster.UserhosterSetTokenArgs
	_args.U = u
	_args.H = h
	var _result userhoster.UserhosterSetTokenResult
	if err = p.c.Call(ctx, "SetToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
